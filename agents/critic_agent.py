import logging
from langchain_openai import OpenAI

# 确保元数据为整数，缺失则设为0
def ensure_metric_is_int(metric):
    return int(metric) if metric is not None else 0

# 评估关键词的表现
def evaluate_keyword(keyword, videos):
    logging.info(f"Evaluating keyword: {keyword}, found {len(videos)} videos.")
    
    # 确保视频是字典类型，过滤掉不是字典的条目
    valid_videos = [video for video in videos if isinstance(video, dict)]
    
    if not valid_videos:
        logging.warning(f"No valid video data for keyword {keyword}")
        return {
            'keyword': keyword,
            'total_views': 0,
            'total_likes': 0,
            'total_comments': 0,
            'critique': f"No valid videos found for keyword {keyword}"
        }

    # 提取视频的统计信息
    total_views = sum(video.get('view_count', 0) for video in valid_videos)
    total_likes = sum(video.get('like_count', 0) for video in valid_videos)
    total_comments = sum(video.get('comment_count', 0) for video in valid_videos)

    critique = f"Critique for {keyword}: {total_views} views, {total_likes} likes, {total_comments} comments."
    
    logging.info(f"Total views for keyword '{keyword}': {total_views}")
    logging.info(f"Total likes for keyword '{keyword}': {total_likes}")
    logging.info(f"Total comments for keyword '{keyword}': {total_comments}")

    return {
        'keyword': keyword,
        'total_views': total_views,
        'total_likes': total_likes,
        'total_comments': total_comments,
        'critique': critique
    }

# 主函数：对搜索结果进行评价并返回最佳关键词
async def critic_agent(search_results, api_key):
    logging.info("Starting critic agent to rank topics.")
    llm = OpenAI(api_key=api_key)

    rankings = []

    # 对每个关键词进行评估
    for keyword, videos in search_results.items():
        evaluation = evaluate_keyword(keyword, videos)
        rankings.append(evaluation)

    # 根据浏览量排序，如果浏览量相同则按点赞数，再按评论数排序
    rankings.sort(key=lambda x: (x['total_views'], x['total_likes'], x['total_comments']), reverse=True)

    # 输出最佳关键词
    best_keyword = rankings[0]['keyword']
    logging.info(f"Best keyword based on views/likes/comments: {best_keyword}")

    # 使用 LLM 生成详细的 critique（可选，但对于 NLP 评估有用）
    detailed_critique_prompt = f"Rank and analyze the following topics based on the provided metrics: {rankings}"
    try:
        detailed_critique = await llm.agenerate(detailed_critique_prompt)
        logging.info(f"Detailed critique generated by LLM: {detailed_critique}")
    except Exception as e:
        logging.error(f"Error generating detailed critique with LLM: {e}")
        detailed_critique = "Failed to generate detailed critique"

    # 将详细评论添加到每个排名中
    for rank in rankings:
        rank['detailed_critique'] = detailed_critique

    return best_keyword, rankings
