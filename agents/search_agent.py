import logging
from googleapiclient.discovery import build
from langchain_openai import OpenAI

# Initialize YouTube API service
def get_youtube_service(api_key):
    logging.info("Initializing YouTube service.")
    return build('youtube', 'v3', developerKey=api_key)

# Multi-agent search (Synchronous)
# Conducts searches with different keyword variations generated by LLM
def multiagent_search(base_keyword, agent_count, top_k, youtube_api_key, openai_api_key):
    logging.info(f"Starting multi-agent search with {agent_count} agents for keyword: {base_keyword}")

    # 1. Generate variations of keywords using LLM
    generated_keywords = keyword_generator_agent(base_keyword, openai_api_key)

    if len(generated_keywords) < agent_count:
        logging.warning(f"Generated fewer keywords ({len(generated_keywords)}) than agent count ({agent_count}). Adjusting agent count.")
        agent_count = len(generated_keywords)

    search_results = {}

    # 2. Each agent searches YouTube with one generated keyword
    for idx in range(agent_count):
        keyword = generated_keywords[idx]
        logging.info(f"Agent searching with keyword: {keyword}")
        
        # YouTube video search with API call
        videos = search_youtube_videos(keyword, youtube_api_key, top_k)
        if videos:
            search_results[keyword] = videos

    logging.info(f"Search completed for {len(search_results)} keywords.")
    return search_results

# Agent keyword brainstorming using OpenAI's LLM
def keyword_generator_agent(base_keyword, api_key):
    logging.info(f"Generating variations for base keyword: {base_keyword}")
    llm = OpenAI(api_key=api_key)

    prompt = f"Generate a list of relevant variations of the keyword '{base_keyword}' for a YouTube fishing video search."

    # Call OpenAI to generate the keyword variations
    try:
        response = llm.generate([prompt])  # Use LLM to generate variations
        generated_keywords = response.generations[0][0].text.split("\n")
        generated_keywords = list(set(filter(None, [kw.strip() for kw in generated_keywords])))  # Clean up the results
        logging.info(f"Generated {len(generated_keywords)} keyword variations.")
        return generated_keywords
    except Exception as e:
        logging.error(f"Error generating keywords with OpenAI: {e}")
        return [base_keyword]  # Fallback to base keyword if OpenAI fails

# YouTube video search function
def search_youtube_videos(keyword, youtube_api_key, top_k):
    youtube = get_youtube_service(youtube_api_key)
    logging.info(f"Fetching videos for keyword: {keyword}")
    
    try:
        # YouTube API request
        request = youtube.search().list(
            part="snippet",
            q=keyword,
            maxResults=top_k
        )
        response = request.execute()

        videos = []
        for item in response['items']:
            # Collect relevant video data
            video_data = {
                'video_id': item['id'].get('videoId', ''),
                'title': item['snippet'].get('title', 'N/A'),
                'description': item['snippet'].get('description', 'N/A'),
                'publish_time': item['snippet'].get('publishedAt', 'N/A'),
                'channel_title': item['snippet'].get('channelTitle', 'N/A'),
            }
            videos.append(video_data)
        
        logging.info(f"Retrieved {len(videos)} videos for keyword: {keyword}")
        return videos
    except Exception as e:
        logging.error(f"Error fetching videos for keyword '{keyword}': {e}")
        return []
